start with SQL file with the sql query in mind

then go to the (db table)specified CONTROLLER
    handle the promises; 
    req.body needs to be in same order as sql query, won't work otherwise!!!
    console.log(req.body) and req.params to find out what to include as params in the db.sql_file
    to create the function that will go in the
        reducer...

in SERVER make endpoint:
    app.(rest method)-- if params: must match what will be put into reducer
    takes in params:
        template string: `/api/endpoint/${params}`
        endpoint url(note if there are parameters)
        ,controller.controllerMethod

in the REDUCER:
    check initial state to see if the 
    piece of state that you want to update is declared
    (if not, include it now you dummy)
        then declare the constant that will be your action.type
        which will be used later as the case in the reducer's
        switch
            write the function to be exported:
                make an axios call-- axios.(rest method) if there was a parameter
                in the endpoint in the server, write the axios url
                like: `/api/${parameter}` where the url parameter is
                the same as the parameter in the function invocation-- function param 
                must take in the endpoint parameter!!!!!!!!!!!
                set the axios to a const variable
                use .then to hold the promise
                write the return which will update initial state
                (in switch statement)
                export function createDeck() {
                    return {
                        type: CREATE_DECK,
                        payload: axios.post('/api/create/deck').then(res => res.data)
                    }
                }


            in the switch statement w/in reducer function
                we will write the case with the action type
                (the const set above the function)
                + '_FULFILLED' is included when the action has
                an axios call payload-- **from redux-promise-middleware**
                include any specified logic 
                the case will return the Object.Assign
                with parameters of:
                    the empty object which is initial state,
                    state,
                    and the piece of initial state that 
                    is updated with the action creator

FRONT END DB INPUT:

make a function corresponding with this.props.reducerFunction(invoked)
in onClick event: 
<button onClick="myFunction()">Click me</button>

componentDidMount(){
    this.props.reducerFunction(this.props.reduxState_id)
}

mapStateToProps is if you need to access info from initialState in reducer

function mapStateToProps(state) {
    console.log("state from private", state)
    return {
        user: state.users
    }
}

export default connect(mapStateToProps, { getUser })(NavBar);

in profile conditional rendering:
`${users.id ? 'href={process.env.REACT_APP_LOGOUT}' : 'href={process.env.REACT_APP_LOGIN}'}`